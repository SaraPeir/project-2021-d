{"version":3,"sources":["webpack://project-2021-c/./src/client/App.js","webpack://project-2021-c/./src/client/index.js","webpack://project-2021-c/./src/redux/slices/fetchWeather.js","webpack://project-2021-c/./src/redux/slices/weatherShower.js","webpack://project-2021-c/./src/redux/store.js"],"names":["App","props","store","provinces","client","ApolloClient","uri","cache","InMemoryCache","console","log","query","gql","then","result","loadableReady","hydrate","window","__INITIAL_PROVINCES__","document","getElementById","fetchWeatherSlice","createSlice","name","initialState","value","hasWeatherData","reducers","fetchWeather","state","action","data","fetch","payload","response","json","hasData","title","today","tomorrow","ciudades","length","actions","reducer","weatherShowerSlice","showWeather","configureStore","weatherShower","weatherShowerReducer","fetchWeatherReducer"],"mappings":"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","file":"main.d90bb229afae13827df1.js","sourcesContent":["import React, {useState} from \"react\"\r\nimport { Provider } from 'react-redux'\r\nimport store from '../redux/store'\r\nimport Global from \"./Global\"\r\n\r\nconst App = (props) => {\r\n    return(\r\n        <Provider store={store}>\r\n            <Global provinces={props.provinces} />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { hydrate } from 'react-dom';\r\nimport App from './App';\r\nimport { loadableReady } from '@loadable/component';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  gql\r\n} from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:4000/graphql',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconsole.log('client', client)\r\n\r\nclient\r\n  .query({\r\n    query: gql`\r\n      query getTasks {\r\n          tasks {\r\n            _id\r\n            isDone\r\n            task\r\n          }\r\n      }\r\n    `\r\n  })\r\n  .then(result => console.log(result));\r\n\r\nexport default loadableReady(() => {\r\n    hydrate(\r\n      <ApolloProvider client={client}>\r\n        <App provinces={window.__INITIAL_PROVINCES__} />\r\n      </ApolloProvider>,\r\n      document.getElementById('app'),\r\n    );\r\n});\r\n\r\n \r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const fetchWeatherSlice = createSlice({\r\n  name: 'fetchWeather',\r\n  initialState: {\r\n    value: {},\r\n    hasWeatherData: false\r\n  },\r\n  reducers: {\r\n    fetchWeather: (state, action) => {\r\n        const data = fetch(`https://www.el-tiempo.net/api/json/v2/provincias/${action.payload}`)\r\n        .then(response => response.json)\r\n\r\n        \r\n    \r\n        let hasData = false;\r\n\r\n        if(data.title && data.today && data.tomorrow && data.ciudades && data.ciudades.length) {\r\n            hasData = true\r\n        }\r\n    \r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      /* console.log('state.value', state.value)\r\n      return !state.value || !state */\r\n\r\n      return {\r\n        ...state,\r\n        value: data,\r\n        hasWeatherData: hasData\r\n      }\r\n      \r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { fetchWeather } = fetchWeatherSlice.actions\r\n\r\nexport default fetchWeatherSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const weatherShowerSlice = createSlice({\r\n  name: 'weatherShower',\r\n  initialState: {\r\n    value: false,\r\n  },\r\n  reducers: {\r\n    showWeather: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      /* console.log('state.value', state.value)\r\n      return !state.value || !state */\r\n\r\n      return {\r\n        ...state,\r\n        value: !state.value\r\n      }\r\n      \r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { showWeather } = weatherShowerSlice.actions\r\n\r\nexport default weatherShowerSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport weatherShowerReducer from './slices/weatherShower'\r\nimport fetchWeatherReducer from './slices/fetchWeather'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n      weatherShower: weatherShowerReducer,\r\n      fetchWeather: fetchWeatherReducer\r\n  },\r\n})"],"sourceRoot":""}